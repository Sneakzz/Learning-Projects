<!-- x:Class defines what code handles events -->
<!-- You can define the title, size, whether it can resize, whether it automatically resizes
     for content, whether it stays on top, whether it starts minimized or maximized
     and an icon -->
<Window x:Class="WpfTutorial.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfTutorial"
        xmlns:Sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" ResizeMode="NoResize"
            SizeToContent="WidthAndHeight" Topmost="False" WindowState="Normal" 
            Icon="./Resources/game.ico" MouseMove="Window_MouseMove">

    <!-- You can store data as a resource and reuse it by adding this -->
    <!--xmlns:Sys="clr-namespace:System;assembly=mscorlib"-->
    <Window.Resources>
        <Sys:String x:Key="strHelloAgain">Hello Again</Sys:String>

        <!-- You can define default styling of components -->
        <!--<Style TargetType="Button">
            <Setter Property="Margin" Value="1"/>
            <Setter Property="FontSize" Value="40"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="Consolas"/>
        </Style>-->

    </Window.Resources>
    
    <!-- This is the layout manager of which there are many including Grid, Canvas and DockPanel -->
    <!--<StackPanel Orientation="Vertical">
        This is where your content goes
        <TextBlock HorizontalAlignment="Center" TextWrapping="NoWrap" Text="Hello World"
                   VerticalAlignment="Top" FontSize="40"/>
    
        Resource used here
        <TextBlock Text="{StaticResource strHelloAgain}" FontSize="40" HorizontalAlignment="Center"/>
    
        This creates a button and calls an event handler.
        You can see a list of all events by clicking the lightning bolt in properties
        <Button x:Name="Button1" Height="60" Width="300"  HorizontalAlignment="Center"
                Content="Close Window" Click="Button1_Click"/>
    
        Opens the file dialog
        <Button x:Name="BtnOpenFile" Height="60" Width="300"  HorizontalAlignment="Center"
                Content="Open File" Click="BtnOpenFile_Click"/>
    
        Opens the save file dialog
        <Button x:Name="BtnSaveFile" Height="60" Width="300"  HorizontalAlignment="Center"
                Content="Save File" Click="BtnSaveFile_Click"/>
    </StackPanel>-->
    
    <!-- This is the Canvas layout manager and it allows you to place components absolutely
         and they don't dynamically resize-->
    <!--<Canvas Background="Gray" Height="450" Width="800">
        <Label Content="Name" Canvas.Left="58" Canvas.Top="41"/>
        <TextBox Name="UsersName" Height="23" Canvas.Left="122" TextWrapping="Wrap"
                 Text="Enter Name" Canvas.Top="44" Width="120"/>
        <Button Content="Send" Canvas.Left="282" Margin="0" Canvas.Top="47" Width="75"
                Click="Send_Button_Click"/>
    </Canvas>-->
    
    <!-- A WrapPanel allows components to flow as the window is resized (Most times a WrapPanel
         is only used as a subelement) -->
    <!--<WrapPanel Background="Gray" Orientation="Horizontal">
        <Label Content="Name"/>
        <TextBox Name="UsersName" Text="Enter Name" Width="150"/>
        <Button Content="Send" Width="75"/>
    </WrapPanel>-->
    
    <!-- Grid Panels are very flexible because everything is placed in a cell in columns and rows
         You add rows and columns by adding RowDefinitions and ColumnDefinitions that have heights
         that are fixed, Auto (Takes space needed by component) or * (Takes space available) -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <!-- Define where component starts and the number of columns it spans -->
        <TextBox Grid.Row="0" Grid.ColumnSpan="4" Margin="2,5"
                 TextWrapping="Wrap" Text="TextBox"/>
        <Button Content="7" HorizontalAlignment="Left" Grid.Row="1"
                VerticalAlignment="Top" Width="200" Height="70"/>
        <Button Content="8" HorizontalAlignment="Left" Grid.Row="1" Grid.Column="1"
                VerticalAlignment="Top" Width="200" Height="70"/>
        <Button Content="9" HorizontalAlignment="Left" Grid.Row="1" Grid.Column="2"
                VerticalAlignment="Top" Width="200" Height="70"/>
        <Button Content="+" HorizontalAlignment="Left" Grid.Row="1" Grid.Column="3"
                VerticalAlignment="Top" Width="200" Height="70"/>
        
        <Button Content="4" HorizontalAlignment="Left" Grid.Row="2"
                VerticalAlignment="Top" Width="200" Height="70"/>
        <Button Content="5" HorizontalAlignment="Left" Grid.Row="2" Grid.Column="1"
                VerticalAlignment="Top" Width="200" Height="70"/>
        <Button Content="6" HorizontalAlignment="Left" Grid.Row="2" Grid.Column="2"
                VerticalAlignment="Top" Width="200" Height="70"/>
        <Button Content="-" HorizontalAlignment="Left" Grid.Row="2" Grid.Column="3"
                VerticalAlignment="Top" Width="200" Height="70"/>
    </Grid>
</Window>
